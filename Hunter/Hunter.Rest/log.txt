2015-08-08 22:18:50,397 [10] ERROR Hunter [(null)] - A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)
System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, Boolean ignoreSniOpenTimeout, Int64 timerExpire, Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, Boolean withFailover, SqlAuthenticationMethod authType)
   at System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean ignoreSniOpenTimeout, TimeoutTimer timeout, Boolean withFailover)
   at System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout)
   at System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance)
   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken)
   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   at System.Data.SqlClient.SqlConnection.Open()
   at System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   at System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   at System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   at System.Data.Entity.SqlServer.SqlProviderServices.<>c__DisplayClass33.<UsingConnection>b__32()
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   at System.Data.Entity.SqlServer.SqlProviderServices.UsingConnection(DbConnection sqlConnection, Action`1 act)
   at System.Data.Entity.SqlServer.SqlProviderServices.UsingMasterConnection(DbConnection sqlConnection, Action`1 act)
   at System.Data.Entity.SqlServer.SqlProviderServices.CreateDatabaseFromScript(Nullable`1 commandTimeout, DbConnection sqlConnection, String createDatabaseScript)
   at System.Data.Entity.SqlServer.SqlProviderServices.DbCreateDatabase(DbConnection connection, Nullable`1 commandTimeout, StoreItemCollection storeItemCollection)
   at System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(DbConnection connection, Nullable`1 commandTimeout, StoreItemCollection storeItemCollection)
   at System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase()
   at System.Data.Entity.Migrations.Utilities.DatabaseCreator.Create(DbConnection connection)
   at System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   at System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   at System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   at System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   at System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   at System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   at System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   at System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   at System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   at System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   at System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   at System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   at System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   at System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   at System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Hunter.DataAccess.Db.Base.Repository`1.All() in C:\Users\serko\Source\Repos\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:line 46
   at Hunter.Services.UserRoleService.GetAllUserRoles() in C:\Users\serko\Source\Repos\bsa-2015-hunter\Hunter\Hunter.Services\Services\UserRoleService.cs:line 29
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:-1,State:0,Class:20
2015-08-09 12:37:46,327 [6] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:39:02,089 [7] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:39:47,839 [7] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:39:51,568 [6] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:39:55,543 [7] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:39:59,066 [6] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:40:02,648 [7] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:40:06,544 [6] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:41:05,534 [6] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:41:10,700 [7] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:41:15,294 [6] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:41:18,761 [7] ERROR Hunter [(null)] - Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException: Unable to update database to match the current model because there are pending changes and automatic migration is disabled. Either write the pending model changes to a code-based migration or enable automatic migration. Set DbMigrationsConfiguration.AutomaticMigrationsEnabled to true to enable automatic migration.
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
2015-08-09 12:45:23,613 [6] ERROR Hunter [(null)] - Column names in each table must be unique. Column name 'Time' in table 'dbo.Activity' is specified more than once.
System.Data.SqlClient.SqlException (0x80131904): Column names in each table must be unique. Column name 'Time' in table 'dbo.Activity' is specified more than once.
   â System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   â System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   â System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   â System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   â System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)
   â System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   â System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   â System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.<NonQuery>b__0(DbCommand t, DbCommandInterceptionContext`1 c)
   â System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`3 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   â System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(DbCommand command, DbCommandInterceptionContext interceptionContext)
   â System.Data.Entity.Internal.InterceptableDbCommand.ExecuteNonQuery()
   â System.Data.Entity.Migrations.DbMigrator.ExecuteSql(MigrationStatement migrationStatement, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsWithinTransaction(IEnumerable`1 migrationStatements, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsWithinNewTransaction(IEnumerable`1 migrationStatements, DbConnection connection, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClass30.<ExecuteStatements>b__2e()
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatements(IEnumerable`1 migrationStatements, DbTransaction existingTransaction)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatements(IEnumerable`1 migrationStatements)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteOperations(String migrationId, VersionedModel targetModel, IEnumerable`1 operations, IEnumerable`1 systemOperations, Boolean downgrading, Boolean auto)
   â System.Data.Entity.Migrations.DbMigrator.ApplyMigration(DbMigration migration, DbMigration lastMigration)
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
ClientConnectionId:cf6ee9a6-3247-4bdc-ad3f-a32d84615331
2015-08-09 12:45:57,603 [7] ERROR Hunter [(null)] - Column names in each table must be unique. Column name 'Time' in table 'dbo.Activity' is specified more than once.
System.Data.SqlClient.SqlException (0x80131904): Column names in each table must be unique. Column name 'Time' in table 'dbo.Activity' is specified more than once.
   â System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   â System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   â System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   â System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   â System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)
   â System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   â System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   â System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.<NonQuery>b__0(DbCommand t, DbCommandInterceptionContext`1 c)
   â System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`3 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   â System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(DbCommand command, DbCommandInterceptionContext interceptionContext)
   â System.Data.Entity.Internal.InterceptableDbCommand.ExecuteNonQuery()
   â System.Data.Entity.Migrations.DbMigrator.ExecuteSql(MigrationStatement migrationStatement, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsWithinTransaction(IEnumerable`1 migrationStatements, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsWithinNewTransaction(IEnumerable`1 migrationStatements, DbConnection connection, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClass30.<ExecuteStatements>b__2e()
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatements(IEnumerable`1 migrationStatements, DbTransaction existingTransaction)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatements(IEnumerable`1 migrationStatements)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteOperations(String migrationId, VersionedModel targetModel, IEnumerable`1 operations, IEnumerable`1 systemOperations, Boolean downgrading, Boolean auto)
   â System.Data.Entity.Migrations.DbMigrator.ApplyMigration(DbMigration migration, DbMigration lastMigration)
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.CandidateService.GetAllInfo() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\CandidateService.cs:ñòðîêà 47
ClientConnectionId:06ffa5c3-7416-4913-8696-486c035a82f7
2015-08-09 12:46:02,887 [6] ERROR Hunter [(null)] - Column names in each table must be unique. Column name 'Time' in table 'dbo.Activity' is specified more than once.
System.Data.SqlClient.SqlException (0x80131904): Column names in each table must be unique. Column name 'Time' in table 'dbo.Activity' is specified more than once.
   â System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   â System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   â System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   â System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   â System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)
   â System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean asyncWrite)
   â System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   â System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.<NonQuery>b__0(DbCommand t, DbCommandInterceptionContext`1 c)
   â System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`3 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   â System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(DbCommand command, DbCommandInterceptionContext interceptionContext)
   â System.Data.Entity.Internal.InterceptableDbCommand.ExecuteNonQuery()
   â System.Data.Entity.Migrations.DbMigrator.ExecuteSql(MigrationStatement migrationStatement, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsWithinTransaction(IEnumerable`1 migrationStatements, DbTransaction transaction, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsWithinNewTransaction(IEnumerable`1 migrationStatements, DbConnection connection, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection, DbInterceptionContext interceptionContext)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatementsInternal(IEnumerable`1 migrationStatements, DbConnection connection)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClass30.<ExecuteStatements>b__2e()
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   â System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatements(IEnumerable`1 migrationStatements, DbTransaction existingTransaction)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteStatements(IEnumerable`1 migrationStatements)
   â System.Data.Entity.Migrations.DbMigrator.ExecuteOperations(String migrationId, VersionedModel targetModel, IEnumerable`1 operations, IEnumerable`1 systemOperations, Boolean downgrading, Boolean auto)
   â System.Data.Entity.Migrations.DbMigrator.ApplyMigration(DbMigration migration, DbMigration lastMigration)
   â System.Data.Entity.Migrations.DbMigrator.Upgrade(IEnumerable`1 pendingMigrations, String targetMigrationId, String lastMigrationId)
   â System.Data.Entity.Migrations.DbMigrator.UpdateInternal(String targetMigration)
   â System.Data.Entity.Migrations.DbMigrator.<>c__DisplayClassc.<Update>b__b()
   â System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   â System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   â System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   â System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   â System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   â System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   â System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   â System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   â System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   â System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   â System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   â System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   â System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   â System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   â System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   â System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   â System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   â System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   â Hunter.DataAccess.Db.Base.Repository`1.All() â d:\projects\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:ñòðîêà 45
   â Hunter.Services.PoolService.GetAllPools() â d:\projects\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:ñòðîêà 28
ClientConnectionId:879db722-2ccf-4565-8e1c-962d87c434fd
2015-08-09 14:57:24,113 [7] ERROR Hunter [(null)] - A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)
System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, Boolean ignoreSniOpenTimeout, Int64 timerExpire, Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, Boolean withFailover, SqlAuthenticationMethod authType)
   at System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean ignoreSniOpenTimeout, TimeoutTimer timeout, Boolean withFailover)
   at System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout)
   at System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance)
   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken)
   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   at System.Data.SqlClient.SqlConnection.Open()
   at System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   at System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   at System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   at System.Data.Entity.SqlServer.SqlProviderServices.<>c__DisplayClass33.<UsingConnection>b__32()
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   at System.Data.Entity.SqlServer.SqlProviderServices.UsingConnection(DbConnection sqlConnection, Action`1 act)
   at System.Data.Entity.SqlServer.SqlProviderServices.UsingMasterConnection(DbConnection sqlConnection, Action`1 act)
   at System.Data.Entity.SqlServer.SqlProviderServices.CreateDatabaseFromScript(Nullable`1 commandTimeout, DbConnection sqlConnection, String createDatabaseScript)
   at System.Data.Entity.SqlServer.SqlProviderServices.DbCreateDatabase(DbConnection connection, Nullable`1 commandTimeout, StoreItemCollection storeItemCollection)
   at System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(DbConnection connection, Nullable`1 commandTimeout, StoreItemCollection storeItemCollection)
   at System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase()
   at System.Data.Entity.Migrations.Utilities.DatabaseCreator.Create(DbConnection connection)
   at System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   at System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   at System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   at System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   at System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   at System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(TContext context)
   at System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   at System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   at System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   at System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   at System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   at System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   at System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   at System.Data.Entity.Internal.Linq.InternalSet`1.GetEnumerator()
   at System.Data.Entity.Infrastructure.DbQuery`1.System.Collections.Generic.IEnumerable<TResult>.GetEnumerator()
   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)
   at Hunter.DataAccess.Db.Base.Repository`1.All() in C:\Users\serko\Source\Repos\bsa-2015-hunter\Hunter\Hunter.DataAccess.Db\Base\Repository.cs:line 45
   at Hunter.Services.PoolService.GetAllPools() in C:\Users\serko\Source\Repos\bsa-2015-hunter\Hunter\Hunter.Services\Services\PoolService.cs:line 28
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:-1,State:0,Class:20
